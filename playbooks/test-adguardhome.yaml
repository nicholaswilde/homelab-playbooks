---
- name: Configure AdGuard Home DNS Rewrites
  hosts: adguard_servers # Target host(s) running AdGuard Home
  gather_facts: no # Usually not needed for API calls

  vars:
    adguard_protocol: http # Change to https if AdGuard Home uses SSL/TLS
    adguard_host: 192.168.1.5 # IP or hostname of your AdGuard Home instance
    adguard_port: 3000 # Port for the AdGuard Home web UI/API
    adguard_api_user: "your_adguard_username"
    # Use Ansible Vault to store sensitive passwords!
    # Example command: ansible-vault encrypt_string 'your_secret_password' --name 'adguard_api_password_vault'
    adguard_api_password_vault: "!vault | $ANSIBLE_VAULT;1.1;AES256..." # Replace with your vault encrypted password

    # Define your desired DNS rewrite rules here
    # This list will REPLACE ALL existing custom filtering rules
    adguard_custom_rules:
      - "||router.local^$dnsrewrite=192.168.1.1"
      - "||nas.local^$dnsrewrite=192.168.1.10"
      - "||test.dev^$dnsrewrite=NXDOMAIN" # Block this domain
      - "*.service.internal^$dnsrewrite=10.10.0.50"
      # - "@@||allow.this.one^" # Example of an allow rule (not a rewrite)
      # - "/regex/.*badstuff.*/^$dnstype=A" # Example of a block rule (not a rewrite)
      # Add any other custom filtering rules (block/allow) you want to preserve here as well

  tasks:
    - name: Update AdGuard Home Custom Filtering Rules (including DNS Rewrites)
      ansible.builtin.uri:
        url: "{{ adguard_protocol }}://{{ adguard_host }}:{{ adguard_port }}/control/filtering/set_rules"
        method: POST
        user: "{{ adguard_api_user }}"
        password: "{{ adguard_api_password_vault }}" # Use the vaulted password
        force_basic_auth: yes # AdGuard Home API uses Basic Auth
        headers:
          Content-Type: "application/json"
        body_format: json
        body: "{{ {'rules': adguard_custom_rules} | to_json }}" # API expects rules within a 'rules' key
        status_code: 200 # Expect HTTP 200 OK on success
        validate_certs: "{{ true if adguard_protocol == 'https' else false }}" # Set to 'yes'/'no' or use conditional like this
      register: adguard_response
      # Optional: Show response for debugging
      # failed_when: "'OK' not in adguard_response.content" # Add custom failure checks if needed

    - name: Show AdGuard Home API Response (Optional Debugging)
      ansible.builtin.debug:
        var: adguard_response.json # Or .content if the response isn't JSON
      when: adguard_response is defined # Only show if the previous task ran
