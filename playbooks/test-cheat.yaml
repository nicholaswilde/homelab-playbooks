---
- name: Install cheat binary from GitHub releases
  hosts: lxcAll
  become: true

  vars:
    github_repo_owner: "cheat"
    github_repo_name: "cheat"
    cheat_install_dir: "/usr/local/bin"
    cheat_binary_name: "cheat"
    cheat_base_url: "https://github.com/cheat/cheat/releases/latest/download"
    asset_name_pattern: "cheat-linux-amd64.gz"
    arch_mapping:
      x86_64: "amd64"
      aarch64: "arm64"
      armv7l: "armv7" # Added for completeness, adjust if needed
    cheat_config_url: https://github.com/nicholaswilde/dotfiles2/raw/refs/heads/main/.config/cheat/conf.yml
    cheat_config_dir: "{{ ansible_user_dir }}/.config/cheat"
    cheat_config_file: "{{ cheat_config_dir }}/conf.yml"
    github_api_url: "https://api.github.com/repos/{{ github_repo_owner }}/{{ github_repo_name }}/releases/latest"

  tasks:
    - name: Gather architecture fact if not already done
      ansible.builtin.setup:
        filter:
          - ansible_architecture
      when: ansible_architecture is not defined

    - name: Determine target architecture for cheat binary
      ansible.builtin.set_fact:
        cheat_arch: "{{ arch_mapping[ansible_architecture] | default(None) }}"
      when: ansible_architecture is defined

    - name: Fail if architecture is unsupported
      ansible.builtin.fail:
        msg: "Unsupported architecture: {{ ansible_architecture }}. Only {{ arch_mapping.keys() | list }} are supported by this playbook."
      when: cheat_arch is none

    - name: Define platform-specific variables
      ansible.builtin.set_fact:
        cheat_binary_name: "cheat-linux-{{ cheat_arch }}"
        cheat_archive_name: "cheat-linux-{{ cheat_arch }}.gz"
        cheat_download_url: "{{ cheat_base_url }}/cheat-linux-{{ cheat_arch }}.gz"
        cheat_dest_path: "{{ cheat_install_dir }}/{{ cheat_binary_name }}"

    - name: Get latest release information from GitHub API
      ansible.builtin.uri:
        url: "{{ github_api_url }}"
        method: GET
        return_content: true
        headers: "{{ {'Authorization': 'token ' + github_token} if github_token is defined else {} }}"
        status_code: 200
      register: release_info

    - name: Extract asset download URL using JSON Query
      ansible.builtin.set_fact:
        download_url: "{{ release_info.json.assets | selectattr('name', 'equalto', asset_name_pattern) | map(attribute='browser_download_url') | first | default(None) }}"
      when: release_info.json.assets is defined

    - name: Fail if specific asset download URL was not found
      ansible.builtin.fail:
        msg: "Could not find asset matching '{{ asset_name_pattern }}' in latest release at {{ github_api_url }}"
      when: download_url is none
      
    - name: Display download result (optional)
      ansible.builtin.debug:
        msg: "Download URL: {{ download_url }}"
      when: download_url is defined
    
    - name: Define more variables
      ansible.builtin.set_fact:
        cheat_tmp_download_path: "/tmp/{{ cheat_archive_name }}" # Temporary download location
        cheat_tmp_binary_path: "/tmp/{{ cheat_binary_name }}" # Temporary location for unarchived binary
        
    - name: Check if cheat is already installed
      ansible.builtin.stat:
        path: "{{ cheat_dest_path }}"
      register: cheat_binary_stat
 
    # --- Installation Block ---
    - name: Install cheat binary block
      when: not cheat_binary_stat.stat.exists
      block:

        - name: Download cheat binary archive for {{ cheat_arch }}
          ansible.builtin.get_url:
            url: "{{ cheat_download_url }}"
            dest: "{{ cheat_tmp_download_path }}"
            mode: '0644'
          register: download_result

        - name: install gunzip
          ansible.builtin.apt:
            name: gzip
            state: present

        - name: Unarchive cheat binary
          ansible.builtin.command:
            cmd: gunzip "{{ cheat_tmp_download_path }}"
            creates: "{{ cheat_tmp_binary_path }}"
          when: download_result is succeeded

        - name: Move cheat binary to installation directory
          ansible.builtin.copy:
            src: "{{ cheat_tmp_binary_path }}"
            dest: "{{ cheat_dest_path }}"
            owner: root
            group: root
            mode: '0755'
            remote_src: true
          when: download_result is succeeded

        - name: Clean up downloaded archive
          ansible.builtin.file:
            path: "{{ cheat_tmp_download_path }}"
            state: absent
          when: download_result is succeeded

     # --- End Installation Block ---

    - name: Verify cheat installation (optional)
      ansible.builtin.command: "{{ cheat_dest_path }} --version"
      register: cheat_version_check
      changed_when: false # This command doesn't change state
      failed_when: cheat_version_check.rc != 0
      when: not cheat_binary_stat.stat.exists # Only verify if we just installed it

    - name: Display cheat version (optional)
      ansible.builtin.debug:
        msg: "Cheat version installed: {{ cheat_version_check.stdout }}"
      when: cheat_version_check is defined and cheat_version_check.stdout is defined

     # --- Config Block ---     
    - name: Config block
      block:
        - name: Ensure ~/.config/cheat directory exists
          ansible.builtin.file:
            path: "{{ cheat_config_dir }}" # Use fact for home directory
            state: directory                            # Ensure it's a directory
            mode: '0755'                                # Set standard directory permissions (rwxr-xr-x)
          register: cheat_dir_result                    # Optional: register result

        - name: Display result (optional)
          ansible.builtin.debug:
            msg: "Cheat directory state: {{ cheat_dir_result.state }}. Path: {{ cheat_dir_result.path }}"
          when: cheat_dir_result is defined and cheat_dir_result.changed # Only show if changed

        - name: Download cheat conf.yml from {{ cheat_config_url }}
          ansible.builtin.get_url:
            url: "{{ cheat_config_url }}"
            dest: "{{ cheat_config_file }}"
            mode: '0644'
            backup: true
            force: true
          register: download_result

        - name: Display download result (optional)
          ansible.builtin.debug:
            msg: "File download status for {{ cheat_config_file }}. Changed: {{ download_result.changed }}. Backup file: {{ download_result.backup_file | default('None') }}"
          when: download_result is defined
